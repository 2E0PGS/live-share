# FAQ

|Question|Answer|
|--------|------|
|**Q:** _What is Visual Studio Live Share?_ |**A:** Visual Studio Live Share is a code name for a set of experimental services designed to help individuals and teams better achieve confidence at speed. The first service we are investigating is designed to enable real-time collaborative development in your own editor or IDE. <br /> <br /> The service and its client integrations let you share your project context rather than just your screen. You get a bi-directional, instant, and familiar way to jump into opportunistic "ad-hoc pair programming" in your tool without being forced to look at the same file, viewport, etc. Editing is only part of the story. With Visual Studio Live Share, you can collaboratively edit and debug seamlessly and securely on a shared working copy of a project using your workflow and the comfort of your IDE/editor and more. |
| **Q:** _How can I enroll in the preview?_ | **A:** We're accepting a limited number of individuals into the preview. If you're interested, simply go the the [registration page](http://aka.ms/vsls-signup), tell us which tool you are most interested in and what interests you about the service and sign in using a GitHub or Microsoft enabled work or school (AAD), or personal Microsoft account. We'll contact you via email if you've been accepted. |
| **Q:** _Does everyone I want to collaborate with have to be accepted in the preview for the service to work?_ | **A: No.** Once you are accepted you will be able to create collaboration sessions and give invite links to others. They will be able to download the preview bits and interact with you but will not be able to create collaboration sessions themselves. They are free to register for the preview as well if they're interested in fully trying out the service. |
| **Q:** _How is my code shared with other participants?_ | **A:** Participants access code directly on a collaboration session owner's machine via a secure cloud service. Only files that are edited are transmitted to participants and none of these files are stored in the cloud. <br /><br /> While the service enables instant access to the project tree, go-to-definition, intellisense, and search across the project, these operations are remoted so the entire contents of the project does not need to be on participant's machines.  <br /><br /> Once the collaboration session / share is stopped, the owner shuts down their tool, or goes offline, further participant access is terminated. 
| **Q:** _Does this remote based model work anywhere?  Is it peer-to-peer?_ | **A:** The only requirement is that the owner and each participant have internet access and can connect to the Azure based service.  No special peer-to-peer connection is required. |
| **Q:** _What happens when the session owner goes offline, shuts down their tool, or OS?_ | **A:** While the "remote" model described above provides instant access and improved security by enabling the owner to cut off access to the code completely at any point, the downside is that the owner needs to be online and connected to the service for participants to connect. <br /><br /> Anyone attempting to use an active invite when the owner is away will be told that they are offline and should be contacted to start the collaboration session again.|
| **Q:** _What kind of session access controls are available?_ | **A:** During the private preview, the non-guessable invite link provides the primary mechanism to prevent unexpected users from joining the session. Users must also sign in using a GitHub or Microsoft supported work or school (AAD), or personal Microsoft account which then gives the owner visibility to who is connected. As mentioned above, access can be cut off by simply ending the collaboration session and the session is not kept running if the owner shuts down their tool or signs out. As we move forward we intend to expand role based access controls to enable further security. Up-vote the features you most want to see [here](http://aka.ms/vsls-feature-requests).|
| **Q:** _How is debug, browser, and local server access controlled?_ | **A:** For security reasons the owner needs to take a specific action to enable any of these scenarios. The owner controls starting the debugging session that participants then attach to from their tools. Browser access to the running application is facilitated via the service operating on a known port specified by the IDE/editor or the owner via the service. At no time are these ports broadly available or available directly on the internet. The owner can opt to share additional ports if they so choose (e.g. for a RESTful API) but has complete control to shut down access as needed. Participants cannot start any of these actions themselves. <br /><br /> Again, the owner also needs to be online and connected to the service and all participants are required to sign in to provide visibility to the owner on who is connected. Unlike screen sharing which gives complete desktop or application control, the specific asset that is shared is highly controlled providing added security. We are also considering adding RBAC at the organization level to enable companies to disable certain features if needed. Up-vote the features you most want to see [here](http://aka.ms/vsls-feature-requests). |
| **Q:** _What advantages does this service have over screen sharing?_  | **A:** The nature of screen sharing inherently means one person is in control at a given time on a fixed view of a desktop or application. It is a tool optimized to share visuals on screen not enable real-time collaborative development. While you can hand off control with some solutions, there is no ability to easily independently investigate issues or browse the code to get more context without impacting the person doing the sharing. From a security perspective, personal messages, email notifications, and other information can appear and be visible to all participants and the person in control is given complete access to the entirety of the desktop environment or shared application. Further, the tool and desktop configuration will be based on the configuration of the person sharing which can lead to a "fish out of water" experience when/if they take control. Latency is also a common problem particularly when trying to edit or perform other rapid interactions. Screen sharing can fall behind quickly when describing a problem as collaborators tend to move around quickly assuming that the person on the other side is seeing everything. <br /> <br /> Visual Studio Live Share lets you share your project context rather than just your screen. You get a bi-directional, instant, and familiar way to jump into opportunistic "ad-hoc pair programming" in your tool without being forced to look at the same file, viewport, etc. Editing is only part of the story. With Visual Studio Live Share, you can collaboratively edit and debug seamlessly and securely on a shared working copy of a project using your workflow and the comfort of your IDE/editor. Improved security is achieved by enabling control over what exactly is shared through simple and familiar gestures localized to the tool. <br /><br />That said, Visual Studio Live Share is not intended to replace screen sharing scenarios where you may want to show a menu item or other visual. In fact, it is expected that much of its use will be in conjunction with collaboration tools providing chat, voice, video, and screen sharing. Visual Studio Live Share focuses on enabling concurrent real-time collaboration rather than providing a way to display a visual remotely. |
|**Q:** _What advantages does this service have over collaboration tools like Slack and Microsoft Teams?_ | **A:** Project Casacde is designed to be used in conjunction with these technologies not replace them. Most collaborative interactions will begin in these tools, get to a point where it is simply to difficult to explain a problem in words, code snippets, or single files and full context is needed. These interactions can be anything from seeking help on a design question or bug, to collaboratively working through a design, pair programming, or simply doing an ad-hoc peer review before a commit or PR. The combination of co-editing, co-debugging and other features elevate the discussion to a new level. See above for details on advantages over the screen sharing aspects of these same tools. |
| **Q:** _How is this different from a Web IDE with collaborative capabilities?_ | **A:** With web IDEs, both the owner and participants need to be using the tool to get collaborative benefits. While it is feasible for participants to tactically switch tools, owners operate in an ecosystem of tools and requiring everything be house or accessible from a web interface can reduce productivity significantly. As a result, many do not feel they are adequate to operate as their primary development environment. Further, Web IDEs assume that you are building and deploying in a VM often in a cloud environment which has both performance downsides and in some cases security implications. With Project Casacde the owner gets the full capabilities of their own ecosystem of tools while providing participants access to the same types of capabilities available in Web IDE environments like co-editing. Further, co-debugging works against the owner's actual environment which can be useful in tracking down problems that only happen there without having to alter the owner's development workflow and application design to accommodate a web based development environment. |
| **Q:** _What languages and application types are supported?_ | **A:** The initial focus is on Node.js and ASP.NET/ASP.NET Core based web applications and services with more coming in the future. While a number of features may work with other languages and platforms, we have not yet optimized the end-to-end scenario for them.  If you are interested in other languages or platforms, [let us know!](https://github.com/Microsoft/live-share/issues/12)
| **Q:** _What tools and tool versions are supported in the preview?_ | **A:** The  preview supports Visual Studio 2017 Update 6 (Windows 7, 8.1, 10) and Visual Studio Code Insiders for Windows 7, 8.1, 10 and Mac OS Sierra. |

## More Information

- [Getting started](getting-started.md)
- [Visual Studio features](collab-vs.md)
- [Visual Studio Code features](collab-vscode.md)

